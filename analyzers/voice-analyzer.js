// =====================================
// VOICE ANALYZER
// =====================================
// Anal√Ωza hlasov√Ωch vstup≈Ø pomoc√≠ AI
// Konvertuje audio blob na base64 a pos√≠l√° k anal√Ωze

/**
 * Voice Analyzer pro anal√Ωzu hlasov√Ωch vstup≈Ø
 * Pou≈æ√≠v√° AIService pro anal√Ωzu audio dat
 */
class VoiceAnalyzer {
    /**
     * Analyzuje audio blob a vrac√≠ v√Ω≈æivov√© √∫daje
     * @param {Blob} audioBlob - Audio nahr√°vka v Blob form√°tu
     * @returns {Promise<Object>} V√Ω≈æivov√© √∫daje {name, calories, protein, carbs, fat}
     * @throws {Error} P≈ôi chybƒõ validace nebo anal√Ωzy
     */
    async analyze(audioBlob) {
        console.log('üé§ VoiceAnalyzer: Zah√°jen√≠ anal√Ωzy audio vstupu');

        try {
            // Validace vstupn√≠ho blobu
            this._validateAudioBlob(audioBlob);

            console.log('üîÑ VoiceAnalyzer: Konverze audio na base64');

            // Konverze audio blobu na base64
            const audioBase64 = await MediaConverter.blobToBase64(audioBlob);

            if (!audioBase64 || audioBase64.length === 0) {
                throw new Error('Nepoda≈ôilo se konvertovat audio na base64');
            }

            console.log(`‚úÖ VoiceAnalyzer: Audio konvertov√°no (${Math.round(audioBase64.length / 1024)}KB)`);

            // Anal√Ωza audio pomoc√≠ AI slu≈æby
            console.log('ü§ñ VoiceAnalyzer: Odes√≠l√°n√≠ audio k AI anal√Ωze');
            const nutritionData = await aiService.analyzeAudio(audioBase64);

            if (!nutritionData) {
                throw new Error('AI anal√Ωza nevr√°tila ≈æ√°dn√° data');
            }

            console.log('‚úÖ VoiceAnalyzer: Anal√Ωza √∫spƒõ≈°n√°', nutritionData);
            return nutritionData;

        } catch (error) {
            console.error('‚ùå VoiceAnalyzer: Chyba p≈ôi anal√Ωze:', error);

            // P≈ôelo≈æen√≠ chyb do ƒçe≈°tiny
            const czechError = this._translateError(error);
            throw new Error(czechError);
        }
    }

    /**
     * Validuje audio blob
     * @private
     * @param {Blob} audioBlob - Audio blob k validaci
     * @throws {Error} Pokud blob nen√≠ validn√≠
     */
    _validateAudioBlob(audioBlob) {
        if (!audioBlob) {
            throw new Error('Audio blob je povinn√Ω');
        }

        if (!(audioBlob instanceof Blob)) {
            throw new Error('Neplatn√Ω form√°t audio dat (mus√≠ b√Ωt Blob)');
        }

        if (audioBlob.size === 0) {
            throw new Error('Audio soubor je pr√°zdn√Ω');
        }

        // Kontrola maxim√°ln√≠ velikosti (nap≈ô. 10MB)
        const maxSizeBytes = 10 * 1024 * 1024;
        if (audioBlob.size > maxSizeBytes) {
            throw new Error(`Audio soubor je p≈ô√≠li≈° velk√Ω (maximum ${Math.round(maxSizeBytes / 1024 / 1024)}MB)`);
        }

        console.log(`‚úÖ VoiceAnalyzer: Audio blob validn√≠ (${Math.round(audioBlob.size / 1024)}KB, typ: ${audioBlob.type || 'nezn√°m√Ω'})`);
    }

    /**
     * P≈ôelo≈æ√≠ anglick√© chybov√© hl√°≈°ky do ƒçe≈°tiny
     * @private
     * @param {Error} error - P≈Øvodn√≠ chyba
     * @returns {string} ƒåesk√© chybov√© hl√°≈°en√≠
     */
    _translateError(error) {
        const errorMessage = error.message.toLowerCase();

        // P≈ôeklad bƒõ≈æn√Ωch chybov√Ωch hl√°≈°ek
        if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
            return 'Chyba p≈ôipojen√≠ k s√≠ti. Zkontrolujte internetov√© p≈ôipojen√≠.';
        }

        if (errorMessage.includes('timeout')) {
            return 'Anal√Ωza trvala p≈ô√≠li≈° dlouho. Zkuste to pros√≠m znovu.';
        }

        if (errorMessage.includes('rate limit') || errorMessage.includes('quota')) {
            return 'Byl p≈ôekroƒçen denn√≠ limit API po≈æadavk≈Ø. Zkuste to z√≠tra.';
        }

        if (errorMessage.includes('api key') || errorMessage.includes('unauthorized')) {
            return 'Chyba autorizace API. Kontaktujte spr√°vce syst√©mu.';
        }

        if (errorMessage.includes('audio') || errorMessage.includes('blob')) {
            return error.message; // U≈æ je v ƒçe≈°tinƒõ z validace
        }

        if (errorMessage.includes('parse') || errorMessage.includes('json')) {
            return 'Nepoda≈ôilo se rozpoznat j√≠dlo z hlasov√© nahr√°vky. Zkuste to znovu s jasnƒõj≈°√≠m popisem.';
        }

        // Pokud nem√°me p≈ôeklad, vr√°t√≠me origin√°ln√≠ hl√°≈°ku
        return error.message || 'Nezn√°m√° chyba p≈ôi anal√Ωze hlasov√©ho vstupu';
    }

    /**
     * Z√≠sk√° podporovan√© audio form√°ty pro MediaRecorder
     * @returns {string} MIME typ nejlep≈°√≠ho podporovan√©ho form√°tu
     */
    static getSupportedAudioFormat() {
        // Seznam preferovan√Ωch form√°t≈Ø (od nejlep≈°√≠ho)
        const formats = [
            'audio/webm;codecs=opus',
            'audio/webm',
            'audio/ogg;codecs=opus',
            'audio/ogg',
            'audio/mp4',
            'audio/wav'
        ];

        // Najdi prvn√≠ podporovan√Ω form√°t
        for (const format of formats) {
            if (MediaRecorder.isTypeSupported && MediaRecorder.isTypeSupported(format)) {
                console.log(`‚úÖ VoiceAnalyzer: Podporovan√Ω form√°t: ${format}`);
                return format;
            }
        }

        console.warn('‚ö†Ô∏è VoiceAnalyzer: ≈Ω√°dn√Ω preferovan√Ω form√°t nen√≠ podporov√°n, pou≈æije se v√Ωchoz√≠');
        return '';
    }

    /**
     * Kontroluje, zda je MediaRecorder API dostupn√©
     * @returns {boolean} True pokud je MediaRecorder podporov√°n
     */
    static isSupported() {
        const supported = typeof MediaRecorder !== 'undefined' &&
                         typeof navigator.mediaDevices !== 'undefined' &&
                         typeof navigator.mediaDevices.getUserMedia !== 'undefined';

        if (!supported) {
            console.warn('‚ö†Ô∏è VoiceAnalyzer: MediaRecorder API nen√≠ podporov√°no v tomto prohl√≠≈æeƒçi');
        }

        return supported;
    }

    /**
     * Z√≠sk√° informace o audio blobu
     * @param {Blob} audioBlob - Audio blob
     * @returns {Object} Informace o audio souboru
     */
    static getAudioInfo(audioBlob) {
        if (!audioBlob || !(audioBlob instanceof Blob)) {
            return null;
        }

        return {
            size: audioBlob.size,
            sizeKB: Math.round(audioBlob.size / 1024),
            sizeMB: Math.round((audioBlob.size / 1024 / 1024) * 100) / 100,
            type: audioBlob.type || 'unknown',
            isAudio: audioBlob.type.startsWith('audio/')
        };
    }
}

// Export pro pou≈æit√≠ v ostatn√≠ch modulech
if (typeof module !== 'undefined' && module.exports) {
    module.exports = VoiceAnalyzer;
}
