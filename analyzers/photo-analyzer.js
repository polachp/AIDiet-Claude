// =====================================
// PHOTO ANALYZER
// =====================================
// Analyzuje obr√°zky j√≠del pomoc√≠ AI
// Validace, komprese, konverze a anal√Ωza

/**
 * PhotoAnalyzer t≈ô√≠da pro anal√Ωzu obr√°zk≈Ø j√≠del
 * Pou≈æ√≠v√° MediaConverter pro pr√°ci se soubory a AIService pro AI anal√Ωzu
 */
class PhotoAnalyzer {
    /**
     * Analyzuje obr√°zek j√≠dla a vrac√≠ v√Ω≈æivov√© √∫daje
     * @param {File} imageFile - Obr√°zek File objekt
     * @param {string} additionalContext - Dodateƒçn√Ω kontext pro AI (optional)
     * @returns {Promise<Object>} V√Ω≈æivov√© √∫daje
     * @throws {Error} P≈ôi chybƒõ validace nebo anal√Ωzy
     */
    async analyze(imageFile, additionalContext = '') {
        console.log('üì∏ PhotoAnalyzer: Zahajuji anal√Ωzu obr√°zku');

        try {
            // 1. Validace souboru
            this._validateImageFile(imageFile);

            // 2. Z√≠sk√°n√≠ informac√≠ o souboru
            const fileInfo = MediaConverter.getFileInfo(imageFile);
            console.log('üì∏ PhotoAnalyzer: Informace o souboru:', fileInfo);

            // 3. Konverze na base64 s kompres√≠
            const imageBase64 = await this._convertToBase64(imageFile, fileInfo);

            // 4. Anal√Ωza pomoc√≠ AI slu≈æby
            console.log('üì∏ PhotoAnalyzer: Odes√≠l√°m do AI slu≈æby...');
            const nutritionData = await aiService.analyzeImage(imageBase64, additionalContext);

            if (!nutritionData) {
                throw new Error('AI slu≈æba nevr√°tila platn√° data');
            }

            console.log('‚úÖ PhotoAnalyzer: Anal√Ωza √∫spƒõ≈°n√°:', nutritionData);
            return nutritionData;

        } catch (error) {
            console.error('‚ùå PhotoAnalyzer: Chyba p≈ôi anal√Ωze:', error);
            throw this._handleError(error);
        }
    }

    /**
     * Validuje, zda je soubor platn√Ω obr√°zek
     * @private
     * @param {File} imageFile - Soubor k validaci
     * @throws {Error} Pokud soubor nen√≠ platn√Ω
     */
    _validateImageFile(imageFile) {
        if (!imageFile) {
            throw new Error('Nebyl vybr√°n ≈æ√°dn√Ω soubor');
        }

        if (!MediaConverter.isImageFile(imageFile)) {
            throw new Error('Vybran√Ω soubor nen√≠ obr√°zek');
        }

        // Kontrola velikosti (max 10 MB)
        const maxSize = 10 * 1024 * 1024; // 10 MB
        if (imageFile.size > maxSize) {
            throw new Error('Obr√°zek je p≈ô√≠li≈° velk√Ω (max 10 MB)');
        }

        console.log('‚úÖ PhotoAnalyzer: Validace souboru √∫spƒõ≈°n√°');
    }

    /**
     * Konvertuje obr√°zek na base64 s kompres√≠
     * @private
     * @param {File} imageFile - Obr√°zek File objekt
     * @param {Object} fileInfo - Informace o souboru
     * @returns {Promise<string>} Base64 string
     */
    async _convertToBase64(imageFile, fileInfo) {
        console.log('üîÑ PhotoAnalyzer: Konvertuji obr√°zek na base64...');

        try {
            // Pokud je soubor men≈°√≠ ne≈æ 500 KB, nekompresi
            if (fileInfo.sizeKB < 500) {
                console.log('üì∏ PhotoAnalyzer: Soubor je mal√Ω, pou≈æiji bez komprese');
                return await MediaConverter.fileToBase64(imageFile);
            }

            // Jinak pou≈æij kompresi
            console.log('üì∏ PhotoAnalyzer: Soubor je velk√Ω, kompresuji...');
            const compressed = await MediaConverter.compressImage(
                imageFile,
                1024, // maxWidth
                1024, // maxHeight
                0.8   // quality
            );

            console.log('‚úÖ PhotoAnalyzer: Komprese dokonƒçena');
            return compressed;

        } catch (error) {
            console.error('‚ùå PhotoAnalyzer: Chyba p≈ôi konverzi:', error);
            throw new Error('Nepoda≈ôilo se zpracovat obr√°zek');
        }
    }

    /**
     * Zpracuje chybu a vr√°t√≠ u≈æivatelsky p≈ô√≠vƒõtivou zpr√°vu
     * @private
     * @param {Error} error - P≈Øvodn√≠ chyba
     * @returns {Error} Upraven√° chyba
     */
    _handleError(error) {
        // Pokud u≈æ m√° chyba ƒçeskou zpr√°vu, vra≈• ji
        if (error.message && error.message.match(/[ƒç≈°≈ô≈æ√Ω√°√≠√©√∫≈Ø≈à≈•ƒè]/i)) {
            return error;
        }

        // R≈Øzn√© typy chyb s ƒçesk√Ωmi zpr√°vami
        const errorMap = {
            'network': 'Chyba p≈ôipojen√≠ k internetu',
            'timeout': 'Anal√Ωza trvala p≈ô√≠li≈° dlouho',
            'quota': 'Denn√≠ limit API vol√°n√≠ byl vyƒçerp√°n',
            'invalid': 'Nepoda≈ôilo se rozpoznat j√≠dlo na obr√°zku',
            'file': 'Chyba p≈ôi ƒçten√≠ souboru'
        };

        // Zkus naj√≠t zn√°m√Ω typ chyby
        const errorType = Object.keys(errorMap).find(key =>
            error.message.toLowerCase().includes(key)
        );

        if (errorType) {
            return new Error(errorMap[errorType]);
        }

        // Default chybov√° zpr√°va
        return new Error('Nepoda≈ôilo se analyzovat obr√°zek. Zkuste to pros√≠m znovu.');
    }

    /**
     * Validuje v√Ω≈æivov√° data
     * @param {Object} nutritionData - Data k validaci
     * @returns {boolean} True pokud jsou data platn√°
     */
    validateNutritionData(nutritionData) {
        if (!nutritionData || typeof nutritionData !== 'object') {
            console.error('‚ùå PhotoAnalyzer: Neplatn√° data - nen√≠ objekt');
            return false;
        }

        const requiredFields = ['name', 'calories', 'protein', 'carbs', 'fat'];
        const hasAllFields = requiredFields.every(field => field in nutritionData);

        if (!hasAllFields) {
            console.error('‚ùå PhotoAnalyzer: Chyb√≠ povinn√° pole:', requiredFields);
            return false;
        }

        // Validace hodnot
        if (nutritionData.calories < 0 || nutritionData.calories > 10000) {
            console.error('‚ùå PhotoAnalyzer: Neplatn√© kalorie:', nutritionData.calories);
            return false;
        }

        if (nutritionData.protein < 0 || nutritionData.protein > 500) {
            console.error('‚ùå PhotoAnalyzer: Neplatn√© b√≠lkoviny:', nutritionData.protein);
            return false;
        }

        if (nutritionData.carbs < 0 || nutritionData.carbs > 1000) {
            console.error('‚ùå PhotoAnalyzer: Neplatn√© sacharidy:', nutritionData.carbs);
            return false;
        }

        if (nutritionData.fat < 0 || nutritionData.fat > 500) {
            console.error('‚ùå PhotoAnalyzer: Neplatn√© tuky:', nutritionData.fat);
            return false;
        }

        console.log('‚úÖ PhotoAnalyzer: Validace dat √∫spƒõ≈°n√°');
        return true;
    }
}

// Singleton instance
const photoAnalyzer = new PhotoAnalyzer();

// Export pro pou≈æit√≠ v ostatn√≠ch modulech
if (typeof module !== 'undefined' && module.exports) {
    module.exports = photoAnalyzer;
}
