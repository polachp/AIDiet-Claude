// =====================================
// TEXT ANALYZER
// =====================================
// Analyzuje textov√Ω popis j√≠dla
// Deleguje pr√°ci na AIService

/**
 * Analyz√°tor textov√©ho vstupu
 * Zpracov√°v√° textov√Ω popis j√≠dla od u≈æivatele
 */
class TextAnalyzer {
    constructor() {
        console.log('üìù TextAnalyzer: Instance vytvo≈ôena');
    }

    /**
     * Analyzuje textov√Ω popis j√≠dla
     * @param {string} textInput - Textov√Ω popis j√≠dla od u≈æivatele
     * @param {AbortController} abortController - Pro zru≈°en√≠ po≈æadavku (optional)
     * @returns {Promise<Object>} V√Ω≈æivov√© √∫daje
     * @throws {Error} P≈ôi pr√°zdn√©m vstupu nebo chybƒõ anal√Ωzy
     */
    async analyze(textInput, abortController = null) {
        console.log('üìù TextAnalyzer: Zahajuji anal√Ωzu textu');

        // Validace vstupu
        if (!textInput || typeof textInput !== 'string') {
            const errorMsg = 'Neplatn√Ω vstup - text je povinn√Ω';
            console.error(`‚ùå TextAnalyzer: ${errorMsg}`);
            throw new Error(errorMsg);
        }

        const trimmedInput = textInput.trim();

        if (trimmedInput.length === 0) {
            const errorMsg = 'Zadejte pros√≠m popis j√≠dla';
            console.error(`‚ùå TextAnalyzer: ${errorMsg}`);
            throw new Error(errorMsg);
        }

        console.log('üìù TextAnalyzer: Input validov√°n:', trimmedInput);

        try {
            // Deleguj anal√Ωzu na AIService
            console.log('üîÑ TextAnalyzer: Vol√°m AIService.analyzeText()');
            const nutritionData = await aiService.analyzeText(trimmedInput, null, abortController);

            if (!nutritionData) {
                const errorMsg = 'Nepoda≈ôilo se analyzovat j√≠dlo. Zkuste popsat j√≠dlo konkr√©tnƒõji.';
                console.error(`‚ùå TextAnalyzer: ${errorMsg}`);
                throw new Error(errorMsg);
            }

            console.log('‚úÖ TextAnalyzer: Anal√Ωza √∫spƒõ≈°n√°:', nutritionData);
            return nutritionData;

        } catch (error) {
            console.error('‚ùå TextAnalyzer: Chyba p≈ôi anal√Ωze:', error);

            // Propaguj AbortError
            if (error.name === 'AbortError') {
                throw error;
            }

            // Pokud je to u≈æ na≈°e chyba, propaguj ji
            if (error.message.includes('Zadejte pros√≠m') ||
                error.message.includes('Nepoda≈ôilo se analyzovat')) {
                throw error;
            }

            // Jinak obal do u≈æivatelsky p≈ô√≠vƒõtiv√© chyby
            throw new Error(`Do≈°lo k chybƒõ p≈ôi anal√Ωze textu: ${error.message}`);
        }
    }

    /**
     * Rychl√° validace vstupu bez anal√Ωzy
     * @param {string} textInput - Text k validaci
     * @returns {boolean} True pokud je vstup validn√≠
     */
    isValidInput(textInput) {
        return textInput &&
               typeof textInput === 'string' &&
               textInput.trim().length > 0;
    }
}

// Export pro pou≈æit√≠ v ostatn√≠ch modulech
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TextAnalyzer;
}
