// =====================================
// AI PROVIDER FACTORY
// =====================================
// Factory pattern pro vytv√°≈ôen√≠ AI provider≈Ø
// Centralizovan√© m√≠sto pro instanciaci provider≈Ø

/**
 * Factory pro vytv√°≈ôen√≠ AI provider≈Ø
 * Implementuje Factory Pattern
 */
class AIProviderFactory {
    /**
     * Vytvo≈ô√≠ instanci providera podle typu
     * @param {string} providerType - Typ providera ('gemini', 'deepseek', atd.)
     * @param {Object} config - Konfigurace providera
     * @returns {BaseAIProvider} Instance providera
     */
    static createProvider(providerType, config) {
        if (!providerType) {
            throw new Error('Provider type je povinn√Ω');
        }

        if (!config) {
            throw new Error('Config je povinn√°');
        }

        const type = providerType.toLowerCase();

        switch (type) {
            case 'gemini':
                return new GeminiProvider(config);

            case 'deepseek':
                return new DeepSeekProvider(config);

            // Zde lze snadno p≈ôidat dal≈°√≠ providery v budoucnu:
            // case 'openai':
            //     return new OpenAIProvider(config);
            // case 'claude':
            //     return new ClaudeProvider(config);

            default:
                throw new Error(`Nepodporovan√Ω provider: ${providerType}. Podporovan√©: gemini, deepseek`);
        }
    }

    /**
     * Vytvo≈ô√≠ v≈°echny dostupn√© providery ze syst√©mov√© konfigurace
     * @param {Object} aiConfig - Kompletn√≠ AI konfigurace z Firestore
     * @returns {Map<string, BaseAIProvider>} Mapa provider≈Ø (name -> instance)
     */
    static createAllProviders(aiConfig) {
        const providers = new Map();

        if (!aiConfig || !aiConfig.providers) {
            console.warn('‚ö†Ô∏è ≈Ω√°dn√° konfigurace AI provider≈Ø');
            return providers;
        }

        for (const [providerName, providerConfig] of Object.entries(aiConfig.providers)) {
            // P≈ôeskoƒç vypnut√© providery
            if (providerConfig.enabled === false) {
                console.log(`‚è≠Ô∏è Provider ${providerName} je vypnut√Ω, p≈ôeskakuji`);
                continue;
            }

            // P≈ôeskoƒç providery bez API kl√≠ƒçe
            if (!providerConfig.apiKey) {
                console.warn(`‚ö†Ô∏è Provider ${providerName} nem√° API kl√≠ƒç, p≈ôeskakuji`);
                continue;
            }

            try {
                const provider = AIProviderFactory.createProvider(providerName, providerConfig);
                providers.set(providerName, provider);
                console.log(`‚úÖ Provider ${providerName} vytvo≈ôen`);
            } catch (error) {
                console.error(`‚ùå Chyba p≈ôi vytv√°≈ôen√≠ providera ${providerName}:`, error);
            }
        }

        return providers;
    }

    /**
     * Z√≠sk√° default providera
     * @param {Object} aiConfig - Kompletn√≠ AI konfigurace
     * @param {Map<string, BaseAIProvider>} providers - Dostupn√≠ provide≈ôi
     * @returns {BaseAIProvider|null} Default provider nebo null
     */
    static getDefaultProvider(aiConfig, providers) {
        if (!aiConfig || !aiConfig.defaultProvider) {
            console.warn('‚ö†Ô∏è Nen√≠ nastaven defaultProvider');
            return null;
        }

        const defaultName = aiConfig.defaultProvider;
        const provider = providers.get(defaultName);

        if (!provider) {
            console.warn(`‚ö†Ô∏è Default provider "${defaultName}" nen√≠ dostupn√Ω`);
            return null;
        }

        return provider;
    }

    /**
     * Z√≠sk√° providera s fallback
     * @param {Object} aiConfig - Kompletn√≠ AI konfigurace
     * @param {Map<string, BaseAIProvider>} providers - Dostupn√≠ provide≈ôi
     * @param {string} preferredProvider - Preferovan√Ω provider (optional)
     * @returns {BaseAIProvider} Provider nebo vyhod√≠ chybu
     */
    static getProviderWithFallback(aiConfig, providers, preferredProvider = null) {
        // Zkus preferovan√©ho providera
        if (preferredProvider) {
            const provider = providers.get(preferredProvider);
            if (provider) {
                console.log(`‚úÖ Pou≈æ√≠v√°m preferovan√©ho providera: ${preferredProvider}`);
                return provider;
            }
            console.warn(`‚ö†Ô∏è Preferovan√Ω provider "${preferredProvider}" nen√≠ dostupn√Ω, zkou≈°√≠m fallback`);
        }

        // Zkus default providera
        const defaultProvider = this.getDefaultProvider(aiConfig, providers);
        if (defaultProvider) {
            console.log(`‚úÖ Pou≈æ√≠v√°m default providera: ${aiConfig.defaultProvider}`);
            return defaultProvider;
        }

        // Zkus fallback po≈ôad√≠
        if (aiConfig.fallbackOrder && Array.isArray(aiConfig.fallbackOrder)) {
            for (const providerName of aiConfig.fallbackOrder) {
                const provider = providers.get(providerName);
                if (provider) {
                    console.log(`‚úÖ Pou≈æ√≠v√°m fallback providera: ${providerName}`);
                    return provider;
                }
            }
        }

        // Zkus jak√©hokoliv dostupn√©ho providera
        if (providers.size > 0) {
            const firstProvider = providers.values().next().value;
            console.log(`‚úÖ Pou≈æ√≠v√°m prvn√≠ho dostupn√©ho providera: ${firstProvider.getName()}`);
            return firstProvider;
        }

        // ≈Ω√°dn√Ω provider nen√≠ dostupn√Ω
        throw new Error('≈Ω√°dn√Ω AI provider nen√≠ dostupn√Ω. Zkontrolujte konfiguraci.');
    }

    /**
     * Z√≠sk√° providera podle capability
     * @param {Map<string, BaseAIProvider>} providers - Dostupn√≠ provide≈ôi
     * @param {string} capability - Po≈æadovan√° schopnost ('text', 'images', 'audio')
     * @returns {BaseAIProvider|null} Provider nebo null
     */
    static getProviderByCapability(providers, capability) {
        for (const [name, provider] of providers) {
            const capabilities = provider.getCapabilities();
            if (capabilities[capability]) {
                console.log(`‚úÖ Nalezen provider s ${capability}: ${name}`);
                return provider;
            }
        }

        console.warn(`‚ö†Ô∏è ≈Ω√°dn√Ω provider nepodporuje ${capability}`);
        return null;
    }

    /**
     * Vyp√≠≈°e informace o dostupn√Ωch providerech
     * @param {Map<string, BaseAIProvider>} providers - Dostupn√≠ provide≈ôi
     */
    static logProvidersInfo(providers) {
        console.log('üìã Dostupn√≠ AI provide≈ôi:');
        for (const [name, provider] of providers) {
            const caps = provider.getCapabilities();
            console.log(`  - ${name}: text=${caps.text}, images=${caps.images}, audio=${caps.audio}`);
        }
    }
}

// Export pro pou≈æit√≠ v ostatn√≠ch modulech
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIProviderFactory;
}
