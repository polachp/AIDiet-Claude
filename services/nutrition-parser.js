// =====================================
// NUTRITION DATA PARSER
// =====================================
// Parsov√°n√≠ v√Ω≈æivov√Ωch dat z AI odpovƒõd√≠
// Nez√°visl√Ω na konkr√©tn√≠m AI provideru

/**
 * Parser pro v√Ω≈æivov√© √∫daje z AI odpovƒõd√≠
 * Podporuje JSON i textov√Ω form√°t
 */
class NutritionParser {
    /**
     * Parsuje AI odpovƒõƒè a extrahuje v√Ω≈æivov√© √∫daje
     * @param {string} aiResponse - Textov√° odpovƒõƒè z AI
     * @returns {Object|null} V√Ω≈æivov√© √∫daje nebo null p≈ôi chybƒõ
     */
    static parse(aiResponse) {
        if (!aiResponse || typeof aiResponse !== 'string') {
            console.error('‚ùå NutritionParser: Neplatn√° odpovƒõƒè');
            return null;
        }

        try {
            console.log('üîç NutritionParser: Parsing AI response');

            // Pokus 1: Parsov√°n√≠ JSON form√°tu
            const jsonResult = this._parseJSON(aiResponse);
            if (jsonResult) {
                console.log('‚úÖ NutritionParser: Parsed from JSON');
                return jsonResult;
            }

            // Pokus 2: Parsov√°n√≠ textov√©ho form√°tu
            const textResult = this._parseText(aiResponse);
            if (textResult) {
                console.log('‚úÖ NutritionParser: Parsed from text');
                return textResult;
            }

            console.error('‚ùå NutritionParser: Nepoda≈ôilo se parsovat odpovƒõƒè');
            return null;

        } catch (error) {
            console.error('‚ùå NutritionParser: Parsing error:', error);
            console.error('Original response:', aiResponse);
            return null;
        }
    }

    /**
     * Parsuje JSON form√°t z AI odpovƒõdi
     * @private
     */
    static _parseJSON(aiResponse) {
        try {
            // Hled√°n√≠ JSON objektu v textu
            const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                return null;
            }

            const parsed = JSON.parse(jsonMatch[0]);

            // Validace struktury
            if (!this._validateStructure(parsed)) {
                console.warn('‚ö†Ô∏è NutritionParser: Invalid JSON structure:', parsed);
                return null;
            }

            // Normalizace dat
            const result = this._normalizeData(parsed);

            // Validace hodnot
            if (!this._validateValues(result)) {
                return null;
            }

            return result;

        } catch (error) {
            // JSON parsing selhal, zkus√≠ se textov√Ω form√°t
            return null;
        }
    }

    /**
     * Parsuje textov√Ω form√°t z AI odpovƒõdi
     * @private
     */
    static _parseText(aiResponse) {
        try {
            const lines = aiResponse.toLowerCase();

            const result = {
                name: this._extractName(aiResponse) || "Analyzovan√© j√≠dlo",
                calories: Math.round(this._extractNumber(lines, /(\d+)\s*(kcal|kalori)/)),
                protein: Math.round(this._extractNumber(lines, /b√≠lkovin[ya]?:?\s*(\d+)/)),
                carbs: Math.round(this._extractNumber(lines, /sacharid[y≈Ø]?:?\s*(\d+)/)),
                fat: Math.round(this._extractNumber(lines, /tuk[y≈Ø]?:?\s*(\d+)/))
            };

            console.log('üîç NutritionParser: Parsed from text:', result);

            // Validace hodnot
            if (!this._validateValues(result)) {
                return null;
            }

            return result;

        } catch (error) {
            console.error('‚ùå NutritionParser: Text parsing error:', error);
            return null;
        }
    }

    /**
     * Extrahuje n√°zev j√≠dla z textu
     * @private
     */
    static _extractName(text) {
        // Hled√° pattern "name": "..." nebo n√°zev: ...
        const nameMatch = text.match(/(?:name|n√°zev)["\s:]+([^"}\n,]+)/i);
        return nameMatch ? nameMatch[1].trim() : null;
    }

    /**
     * Extrahuje ƒç√≠slo z textu podle regex patternu
     * @private
     */
    static _extractNumber(text, pattern) {
        const match = text.match(pattern);
        return match ? parseInt(match[1]) : 0;
    }

    /**
     * Validuje strukturu parsovan√Ωch dat
     * @private
     */
    static _validateStructure(data) {
        return (
            data &&
            typeof data === 'object' &&
            'name' in data &&
            'calories' in data &&
            'protein' in data &&
            'carbs' in data &&
            'fat' in data &&
            typeof data.calories === 'number' &&
            typeof data.protein === 'number' &&
            typeof data.carbs === 'number' &&
            typeof data.fat === 'number'
        );
    }

    /**
     * Normalizuje data (zaokrouhlen√≠, type conversion)
     * @private
     */
    static _normalizeData(data) {
        return {
            name: String(data.name || "Analyzovan√© j√≠dlo").trim(),
            calories: Math.round(Number(data.calories) || 0),
            protein: Math.round(Number(data.protein) || 0),
            carbs: Math.round(Number(data.carbs) || 0),
            fat: Math.round(Number(data.fat) || 0)
        };
    }

    /**
     * Validuje hodnoty (rozumn√© rozsahy)
     * @private
     */
    static _validateValues(data) {
        // Minim√°ln√≠ kalorie (ignoruje velmi n√≠zk√© hodnoty)
        if (data.calories < 5) {
            console.warn('‚ö†Ô∏è NutritionParser: Calories too low, likely not food:', data);
            return false;
        }

        // V≈°echna makra nesm√≠ b√Ωt nula
        if (data.protein === 0 && data.carbs === 0 && data.fat === 0) {
            console.warn('‚ö†Ô∏è NutritionParser: All macros are zero, likely not food:', data);
            return false;
        }

        // Maxim√°ln√≠ rozumn√© hodnoty (ochrana p≈ôed chybami AI)
        if (data.calories > 10000 || data.protein > 500 || data.carbs > 1000 || data.fat > 500) {
            console.warn('‚ö†Ô∏è NutritionParser: Values too high, likely error:', data);
            return false;
        }

        return true;
    }

    /**
     * Vytvo≈ô√≠ prompt pro AI anal√Ωzu j√≠dla
     * @param {string} foodDescription - Popis j√≠dla od u≈æivatele
     * @returns {string} Form√°tovan√Ω prompt
     */
    static createFoodAnalysisPrompt(foodDescription) {
        return `Analyzuj n√°sleduj√≠c√≠ j√≠dlo a vra≈• p≈ôesn√© nutriƒçn√≠ hodnoty ve form√°tu JSON:
{
  "name": "n√°zev j√≠dla",
  "calories": celkov√© kalorie v kcal (ƒç√≠slo),
  "protein": gramy b√≠lkovin (ƒç√≠slo),
  "carbs": gramy sacharid≈Ø (ƒç√≠slo),
  "fat": gramy tuk≈Ø (ƒç√≠slo)
}

J√≠dlo: ${foodDescription}

D≈ÆLE≈ΩIT√â - Odhad velikosti:
- Pokud je uvedeno mno≈æstv√≠ (gramy, ml, kusy), pou≈æij ho p≈ôesnƒõ
- Pokud nen√≠ uvedeno mno≈æstv√≠, p≈ôedpokl√°dej standardn√≠ porci:
  * Maso/ryba: ~150g
  * P≈ô√≠loha (r√Ω≈æe, brambory, tƒõstoviny): ~200g va≈ôen√©
  * Zelenina: ~150g
  * Peƒçivo: 1 kus = ~50-70g
  * N√°poje: standardn√≠ sklenice = 250ml

Vra≈• POUZE validn√≠ JSON objekt, ≈æ√°dn√Ω dal≈°√≠ text.`;
    }

    /**
     * Vytvo≈ô√≠ prompt pro AI anal√Ωzu obr√°zku j√≠dla
     * @param {string} additionalContext - Dodateƒçn√Ω kontext od u≈æivatele (optional)
     * @returns {string} Form√°tovan√Ω prompt
     */
    static createImageAnalysisPrompt(additionalContext = '') {
        const basePrompt = `Analyzuj j√≠dlo na tomto obr√°zku a vra≈• p≈ôesn√© nutriƒçn√≠ hodnoty ve form√°tu JSON:
{
  "name": "n√°zev j√≠dla",
  "calories": celkov√© kalorie v kcal (ƒç√≠slo),
  "protein": gramy b√≠lkovin (ƒç√≠slo),
  "carbs": gramy sacharid≈Ø (ƒç√≠slo),
  "fat": gramy tuk≈Ø (ƒç√≠slo)
}

D≈ÆLE≈ΩIT√â:
- Odhadni velikost porce na z√°kladƒõ vizu√°ln√≠ anal√Ωzy
- Pokud je na obr√°zku v√≠ce j√≠del, seƒçti v≈°echny dohromady
- Sna≈æ se co nejp≈ôesnƒõji odhadnout mno≈æstv√≠`;

        if (additionalContext) {
            return `${basePrompt}\n\nDodateƒçn√Ω kontext: ${additionalContext}\n\nVra≈• POUZE validn√≠ JSON objekt.`;
        }

        return `${basePrompt}\n\nVra≈• POUZE validn√≠ JSON objekt.`;
    }

    /**
     * Vytvo≈ô√≠ prompt pro AI anal√Ωzu audio vstupu
     * @returns {string} Form√°tovan√Ω prompt
     */
    static createAudioAnalysisPrompt() {
        return `P≈ôepi≈° toto audio a n√°slednƒõ analyzuj zm√≠nƒõn√© j√≠dlo. Vra≈• v√Ωsledek ve form√°tu JSON:
{
  "name": "n√°zev j√≠dla",
  "calories": celkov√© kalorie v kcal (ƒç√≠slo),
  "protein": gramy b√≠lkovin (ƒç√≠slo),
  "carbs": gramy sacharid≈Ø (ƒç√≠slo),
  "fat": gramy tuk≈Ø (ƒç√≠slo)
}

D≈ÆLE≈ΩIT√â - Odhad velikosti:
- Pokud u≈æivatel uvede mno≈æstv√≠, pou≈æij ho p≈ôesnƒõ
- Pokud ne, p≈ôedpokl√°daj standardn√≠ porci

Vra≈• POUZE validn√≠ JSON objekt, ≈æ√°dn√Ω dal≈°√≠ text.`;
    }
}

// Export pro pou≈æit√≠ v ostatn√≠ch modulech
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NutritionParser;
}
